<?xml version="1.0" encoding="UTF-8"?>
<xwikidoc>
<web>Macros</web>
<name>AddExcelExportToLivetableMacroResultsPage</name>
<language></language>
<defaultLanguage>en</defaultLanguage>
<translation>0</translation>
<parent>Macros.WebHome</parent>
<creator>XWiki.Admin</creator>
<author>XWiki.Admin</author>
<customClass></customClass>
<contentAuthor>XWiki.Admin</contentAuthor>
<creationDate>1341219956000</creationDate>
<date>1341219956000</date>
<contentUpdateDate>1341219956000</contentUpdateDate>
<version>1.1</version>
<title>AddExcelExportToLivetableMacroResultsPage</title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment></comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/2.1</syntaxId>
<hidden>false</hidden>
<content>{{include document="XWiki.LiveTableResultsMacros" /}}
{{velocity output="false"}}
#**
 * Macro to prepare the queries of a livetable data call. Based on XWiki.LiveTableResultsMacros&gt;gridresultwithfilter.
 * If "XWiki.LiveTableResultsMacros&gt;gridresultwithfilter" changes in the future versions of XWiki, check on it if
 * you need to fix this function.
 *#
#macro(gridresultpreparequeries $className $collist $filterfrom $filterwhere)
  #set($offset = $util.parseInt($request.get('offset')))
  ## offset starts from 0 in velocity and 1 in javascript
  #set($offset = $offset - 1)
  #if($offset &lt; 0)
    #set($offset = 0)
  #end
  #set($limit = $util.parseInt($request.get('limit')))
  #set($tablelist = $util.arrayList)


  ##
  ## Compute the query to use for retrieving data
  ##
  ## 
  ## additional columns, should *not* contain parameters, all added column names must be filtered
  #set($fromSql = '')
  ## parametrized filter part of the query
  #set($whereSql = '')
  ## list of parameters to use with $whereSql
  #set($whereParams = [])
  #set($class = $xwiki.getDocument($className).getxWikiClass())
  ##
  ## Exclude Blacklisted spaces ($blacklistedSpaces is set in xwikivars.vm)
  ##
  #if($blacklistedSpaces.size() &gt; 0)
    #set($whereSql = "${whereSql} and doc.space not in (")
    #foreach ($blacklistedSpace in $blacklistedSpaces)
      #if($velocityCount &gt; 1)#set ($whereSql = "${whereSql},")#end
      #set($whereSql = "${whereSql}?")
      #set($discard = $whereParams.add("$!{blacklistedSpace}"))
    #end
    #set($whereSql = "${whereSql})")
  #end
  ##
  ## Add the columns needed for the actual data
  ##
  #foreach($colname in $collist)
    #livetable_addColumnToQuery($colname)
  #end
  ##
  ## Tag filtering
  ##
  #if($request.tag)
    #set($fromSql = "${fromSql} , BaseObject as tobject, DBStringListProperty as tagprop")
    #set($whereSql = "${whereSql} and tobject.className='XWiki.TagClass' and tobject.name=doc.fullName and tobject.id=tagprop.id.id and tagprop.id.name='tags' and (")
    #foreach($tag in $request.getParameterValues('tag'))
      #set($tag = $util.decodeURI($tag))
      #if($velocityCount &gt; 1) #set($whereSql = "${whereSql} and ") #end
      #set($whereSql = "${whereSql} ? in elements(tagprop.list)")
      #set($discard = $whereParams.add("${tag}"))
    #end
    #set($whereSql = "${whereSql})")
  #end
  ##
  ##
  ## Order
  ##
  #set($order = "$!request.sort")
  #if($order != '')
    #set($orderDirection = "$!{request.get('dir').toLowerCase()}")
    #if("$!orderDirection" != '' &amp;&amp; "$!orderDirection" != 'asc')
      #set($orderDirection = 'desc')
    #end
    #if($order == 'description')
      #set($tableAlias = 'dtable')
    #else
      #set($tableAlias = $order)
    #end
    ## only safe version should be used in SQL queries
    #set($safe_tableAlias = "$!{tableAlias.replaceAll('[^a-zA-Z0-9_.]','')}")
    ##
    #if($order.startsWith('doc.'))
      #set($orderSql = " order by ${safe_tableAlias.replace('_','.')} ${orderDirection}")
    #elseif($tablelist.contains($tableAlias))
      #set ($multiselect = "$!{class.get($order).getProperty('multiSelect').getValue()}")
      #if ($multiselect != '1')
        #set ($orderSql = " order by ${safe_tableAlias}.value ${orderDirection}")
      #end
    #elseif($order == 'averagevote')
      #livetable_getTableName($order)
      #set($fromSql = "${fromSql}, BaseObject as objratings, ${tableName} ${safe_tableAlias}")
      #set($whereSql = "${whereSql} and doc.fullName=objratings.name and objratings.className='XWiki.AverageRatingsClass' and objratings.id=${safe_tableAlias}.id.id and ${safe_tableAlias}.name = ?")
      #set($discard = $whereParams.add("${order}"))
      #set($orderSql = " order by ${safe_tableAlias}.value ${orderDirection}")
    #else
      #set($multiselect = $class.get($order).getProperty('multiSelect').getValue())
      #if("$multiselect" != '1')
        #livetable_getTableName($order)
        #set($fromSql = "${fromSql}, ${tableName} ${safe_tableAlias}")
        #set($whereSql = "${whereSql} and obj.id=${safe_tableAlias}.id.id and ${safe_tableAlias}.name = ?")
        #set($discard = $whereParams.add("${order}"))
        #set($orderSql = " order by ${safe_tableAlias}.value ${orderDirection}")
      #end
    #end
  #end
  ##
  ##
  ## Compute the final queries
  ##
  #set($sqlParams = [])
  #set($tagsMatchingParams = [])
  #set($allMatchingParams = [])
  #if("$!className" != '')
    ## Class query
    #set($countSql = ", BaseObject as obj $!fromSql $!filterfrom where obj.name=doc.fullName and obj.className = ? and doc.fullName not in (?, ?) $!whereSql $!filterwhere")
    #set($discard = $sqlParams.addAll(["${className}", "${className}Template", ${className.replaceAll('Class$', 'Template')}]))
    #set($discard = $sqlParams.addAll($whereParams))
    ##
    #set($tagsMatchingFiltersFrom = ", BaseObject as obj $!fromSql $!filterfrom")
    #set($tagsMatchingFiltersWhere = "obj.name=doc.fullName and obj.className = ? and doc.fullName not in (?, ?) $!whereSql $!filterwhere")
    #set($discard = $tagsMatchingParams.addAll(["${className}", "${className}Template", ${className.replaceAll('Class$', 'Template')}]))
    #set($discard = $tagsMatchingParams.addAll($whereParams))
    ##
    #set($allMatchingTagsFrom = ", BaseObject as obj $!filterfrom")
    #set($allMatchingTagsWhere = "obj.name=doc.fullName and obj.className = ? and doc.fullName not in (?, ?) $!filterwhere")
    #set($discard = $allMatchingParams.addAll(["${className}", "${className}Template", ${className.replaceAll('Class$', 'Template')}]))
    ##
    #if($filterParams)
      #set($discard = $sqlParams.addAll($filterParams))
      #set($discard = $tagsMatchingParams.addAll($filterParams))
      #set($discard = $allMatchingParams.addAll($filterParams))
    #end
  #else
    ## Document query
    #set($countSql = "$!fromSql $!filterfrom where 1=1 $!whereSql $!filterwhere")
    #set($discard = $sqlParams.addAll($whereParams))
    ##
    #set($tagsMatchingFiltersFrom = "$!fromSql $!filterfrom")
    #set($tagsMatchingFiltersWhere = "1=1 $!whereSql $!filterwhere")
    #set($discard = $tagsMatchingParams.addAll($whereParams))
    ##
    #set($allMatchingTagsFrom = "$!filterfrom")
    #set($allMatchingTagsWhere = "1=1 $!filterwhere")
    ##
    #if($filterParams)
      #set($discard = $sqlParams.addAll($filterParams))
      #set($discard = $tagsMatchingParams.addAll($filterParams))
      #set($discard = $allMatchingParams.addAll($filterParams))
    #end
  #end
  ##
  ## TagCloud matching the current filters
  #set($tagsMatchingFilters = $xwiki.tag.getTagCountForQuery($tagsMatchingFiltersFrom, $tagsMatchingFiltersWhere, $tagsMatchingParams))
  ## TagCloud matching all the documents used by the livetable
  #set($allMatchingTags = $xwiki.tag.getTagCountForQuery($allMatchingTagsFrom, $allMatchingTagsWhere, $allMatchingParams))
  #set($sql = "$countSql $!{orderSql}")
#end

#**
 * Macro to get the results of a livetable data call.
 * This page is called from live grids via Ajax with the argument xpage=plain. It returns a
 * set of results serialized in JSON.
 *#
#macro(gridresultwithfilterexcel $className $collist $filterfrom $filterwhere)
  #gridresultpreparequeries($className $collist $filterfrom $filterwhere)
  ## running the queries
  ##$sql
  #set($items = $xwiki.searchDocuments($sql, 0, 0, $sqlParams))
  ##$items
  #gridresultexcel($className $collist $filterfrom $filterwhere)
#end

#*
 * Macro to get the results of a livetable data call in json.
 * This page is called from live grids via Ajax with the argument xpage=plain. It returns a
 * set of results serialized in JSON.
 *#
#macro(gridresultexcel $className $collist $filterfrom $filterwhere)
 #set($calc = $xwiki.calc)
 #set($class = $xwiki.getClass($className)) 
 #if($calc)
   #set($wb = $calc.getWritableWorkbook())
   #set($sheet = $wb.createSheet("XWiki", 0))
   #set($colCount = 0)
   #foreach($colname in $collist)
     #set($ok = $sheet.setColumnView($velocityCount, 15))
     #if($colname.startsWith('doc.'))
      #set($ok = $calc.setLabelCell($sheet, 0, $colCount, $colname))    
      #set($ok = $sheet.setColumnView($colCount, 20))
      #set($colCount = $colCount + 1)
     #elseif($colname == '_action') ,
     #else     
      #set($colPrettyName = $class.get($colname).getPrettyName())      
      #set($ok = $calc.setLabelCell($sheet, 0, $colCount, $colPrettyName))    
      #set($ok = $sheet.setColumnView($colCount, 20))
      #set($colCount = $colCount + 1)
     #end 
   #end
   #if("$!{request.withPageName}" == 'true')
     #set($ok = $calc.setLabelCell($sheet, 0, $colCount, "page"))    
     #set($ok = $sheet.setColumnView($colCount, 20))
     #set($colCount = $colCount + 1)
   #end
   #if("$!{request.withPageURL}" == 'true')
     #set($ok = $calc.setLabelCell($sheet, 0, $colCount, "url"))    
     #set($ok = $sheet.setColumnView($colCount, 80))
   #end

   ## ==============================================
   ## excel starts
   ## ==============================================
   #set($rowCount = 1)
$items
   #foreach($item in $items)
$item $rowCount
     #set($viewable = $xwiki.hasAccessLevel('view', $context.user, "${context.database}:${item}"))
     #if(!$viewable)
     #else
       #set($itemDoc = $xwiki.getDocument($item))
       #set($fullname = "${itemDoc.wiki}:${itemDoc.space}.${itemDoc.name}")
       #set($discard = $itemDoc.use($className))
       #set($obj = $itemDoc.getObject($className))
       #set($itemUrl = $itemDoc.getExternalURL("view"))  
       #set($colCount = 0)
       #foreach($colname in $collist)
         #if($colname=='doc.title')
           #set($ok = $calc.setLabelCell($sheet, $rowCount, $colCount, $itemDoc.title))               
           #set($colCount = $colCount + 1)
         #elseif($colname=='doc.name')
           #set($ok = $calc.setLabelCell($sheet, $rowCount, $colCount, $itemDoc.getName()))                        
           #set($colCount = $colCount + 1)
         #elseif($colname=='doc.date')
           #set($ok = $calc.setLabelCell($sheet, $rowCount, $colCount, $xwiki.formatDate($itemDoc.getDate())))
           #set($colCount = $colCount + 1)
         #elseif($colname=='doc.creationDate')
           #set($ok = $calc.setLabelCell($sheet, $rowCount, $colCount, $xwiki.formatDate($itemDoc.getCreationDate())))                        
           #set($colCount = $colCount + 1)
         #elseif($colname=='doc.author')
           #set($ok = $calc.setLabelCell($sheet, $rowCount, $colCount, $itemDoc.author))                        
           #set($colCount = $colCount + 1)
         #elseif($colname=='doc.creator')
           #set($ok = $calc.setLabelCell($sheet, $rowCount, $colCount, $itemDoc.creator))                        
           #set($colCount = $colCount + 1)
         #elseif($colname=='doc.version')
           #set($ok = $calc.setLabelCell($sheet, $rowCount, $colCount, $itemDoc.version))                        
           #set($colCount = $colCount + 1)
         #elseif($colname == '_attachments')
           #livetable_getAttachmentsList($itemDoc)
           #set($ok = $calc.setLabelCell($sheet, $rowCount, $colCount, $attachlist))    
           #set($colCount = $colCount + 1)
         #elseif($colname == '_avatar')
           #livetable_getAvatar($itemDoc)
           #set($ok = $calc.setLabelCell($sheet, $rowCount, $colCount, $avatar))    
           #set($colCount = $colCount + 1)
         #elseif($colname == '_images')
           #livetable_getImagesList($itemDoc)
           #set($ok = $calc.setLabelCell($sheet, $rowCount, $colCount, $imagesList))    
           #set($colCount = $colCount + 1)
         #else 
           #set($propClassName = "$!{request.get(${colname.concat('_class')})}")
           #if($propClassName != '')
             #set($propClass = $xwiki.getDocument($propClassName).getxWikiClass())
             #set($discard = $itemDoc.use($propClassName))
           #else
             #set($propClass = $class)
           #end
           ## Retrieve the property type as it might be usefull
           #set($propType = '')
           #if($listtool.contains($propClass.getPropertyNames(), $colname))
             #set($propType = "$!{propClass.get($colname).type}")
           #end
           #set($fieldDisplayValue = "$!itemDoc.getValue($colname, $obj)")
           #if($fieldDisplayValue == '')
             #set($fieldDisplayValue = $msg.get("${request.transprefix}emptyvalue"))
           #else
            #set($fieldDisplayValue = "$!itemDoc.getRenderedContent($fieldDisplayValue, $!itemDoc.syntax.toIdString())")
            #set($xmlCleaner = $xwiki.parseGroovyFromPage('Macros.AddExcelExportToLivetableMacroGroovy'))
            #set($fieldDisplayValue = $xmlCleaner.getCleanText($fieldDisplayValue))            
           #end           
           #set($ok = $calc.setLabelCell($sheet, $rowCount, $colCount, $fieldDisplayValue))    
           #set($colCount = $colCount + 1)
           ## reset to the default class
           #set($discard = $itemDoc.use($className))
         #end
       #end ## end foreach column
       #if("$!{request.withPageName}" == 'true')
         #set($ok = $calc.setLabelCell($sheet, $rowCount, $colCount, $fullname))    
         #set($colCount = $colCount + 1)
       #end
       #if("$!{request.withPageURL}" == 'true')
         #set($ok = $calc.setLabelCell($sheet, $rowCount, $colCount, $itemUrl))    
       #end
       #set($rowCount = $rowCount + 1)
     #end ## end viewable
   #end
   ## ==============================================
   ## excel ended, now output
   ## ==============================================
   #if(!$request.debug)
    #set($bytes = $calc.getWritableWorkbookAsBytes($wb))
     #if($bytes)
       #set($ok = $response.setContentType("application/ms-excel"))
       #set($ok = $response.setHeader("Content-Disposition", 'inline; filename="livetable.xls"'))
       #set($ok = $xcontext.setFinished(true))
       #set($ok = $response.getOutputStream().write($bytes))
       #set($ok = $response.setHeader("Cache-Control","max-age=120, public"))
       #set($ok = $response.setHeader("Pragma","-"))
       #set($expires = $util.getDate().getTime())
       #set($expires = $expires+120000)
       #set($expires =$util.getDate($expires))
       #set($ok = $response.setDateHeader("Expires",$expires.getTime()))
     #else
      ## TODO need nice translated error message
      Failed to generate Excel file:

      $!context.exception
     #end
    #else
     DONE
    #end
 #else
    ## TODO need nice translated error message
    Excel plugin is not installed
 #end 
#end
{{/velocity}}

{{velocity wiki="false"}}
#set ($extra = '')
#set ($params = [])
#if ("$!request.space" != '')
  #set ($extra = "${extra} and doc.space = ?")
  #set ($discard = $params.add($request.space))
#end
#if ("$!request.parent" != '')
  #set ($extra = "${extra} and doc.parent = ?")
  #set ($discard = $params.add($request.parent))
#end
#if ("$!request.orphaned" == '1')
  #set ($extra = "${extra} and doc.parent='' and doc.name&lt;&gt;'WebHome'")
#end
#if("$!{request.outputSyntaxType}" == 'excel')
  #gridresultwithfilterexcel("$!request.classname" $request.collist.split(',') '' "${extra}" $params)
#else
This page generates Excel export when called with good arguments (such as outputSyntaxType=excel).
#end

{{/velocity}}</content></xwikidoc>